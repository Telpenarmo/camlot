Module = Decl*

Decl =
  LetDecl
| OpenDecl
| TypeDecl

LetDecl = 'let' 'Ident' Params '=' Expr ';'
OpenDecl = 'open' 'Ident' ';'
TypeDecl = 'type' 'Ident' '=' TypeExpr ';'

TypeExpr =
  TypeIdent
| TypeArrow
| TypeParen

TypeIdent  = 'Ident'
TypeArrow = from:TypeExpr '->' to:TypeExpr
TypeParen = '(' TypeExpr ')'

Expr =
  IdentExpr
| LiteralExpr
| AppExpr
| LambdaExpr
| LetExpr
| ParenExpr
| UnitExpr
| BinaryExpr

IdentExpr = 'Ident'
LiteralExpr = 'Int'
AppExpr = func:Expr arg:Expr
LambdaExpr = 'Lambda' 'Ident' Params '->' body:Expr
LetExpr = 'let' 'Ident' Params '=' def:Expr 'in' body:Expr
ParenExpr = '(' Expr ')'
UnitExpr = '()'

Params = Param*
Param = 'Ident' | '(' 'Ident' ':' TypeExpr ')'

BinaryExpr = lhs:Expr InfixSymbol rhs:Expr
InfixSymbol = '+' | '-' | '*' | '/'
