Module = ModuleItem*

ModuleItem =
  Definition
| Open
| TypeDefinition

Definition = 'def' 'Ident' Params TypeAnnotation? DefBody
Open = 'open' 'Ident' ';'
TypeDefinition = 'type' 'Ident' '=' TypeExpr ';'

TypeAnnotation = ':' TypeExpr

DefBody =
  '=' Expr ';'
| BlockExpr

TypeExpr =
  TypeIdent
| TypeArrow
| TypeParen

TypeIdent  = 'Ident'
TypeArrow = from:TypeExpr '->' to:TypeExpr
TypeParen = '(' TypeExpr ')'

Stmt =
  ExprStmt
| LetStmt

ExprStmt = Expr ';'
LetStmt = 'let' 'Ident' Params TypeAnnotation? '=' def:Expr ';'

Expr =
  IdentExpr
| LiteralExpr
| LambdaExpr
| ParenExpr
| BinaryExpr
| BlockExpr

BlockExpr =
  '{'
    statements:Stmt*
    tail_expr:Expr?
  '}'

IdentExpr = 'Ident'
LiteralExpr = Literal
AppExpr = (func:Expr | app_func:AppExpr) arg:Expr
LambdaExpr = ('Î»' | '\\') Params TypeAnnotation? '->' body:Expr
ParenExpr = '(' Expr? | AppExpr ')'

Literal =  'Int' | 'dummy'

Params = Param*
Param = 'Ident' | '(' 'Ident' TypeAnnotation? ')'

BinaryExpr = lhs:Expr InfixSymbol rhs:Expr
InfixSymbol = '+' | '-' | '*' | '/'
